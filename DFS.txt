//Binary Tree Inorder Traversal
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if(root==None):
            return[]
        return(
            self.inorderTraversal(root.left)+[root.val]+self.inorderTraversal(root.right)
        )


//Binary Tree Preorder Traversal
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if(root==None):
            return[]
        return(
            [root.val]+self.preorderTraversal(root.left)+self.preorderTraversal(root.right)
        )


        
///Binary Tree Postorder Traversal
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if(root==None):
            return[]
        return(
           self.postorderTraversal(root.left)+self.postorderTraversal(root.right)+ [root.val]
        )